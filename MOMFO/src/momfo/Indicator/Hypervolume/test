package util.Indicator.Hypervolume;

import java.io.IOException;
import java.util.Comparator;
import java.util.HashMap;

import core.Population;
import util.Front;
import util.JMException;
import util.POINT;

public class WFGHV extends HypervolumeCalculator{
  public WFGHV(double[] ReferencePoint) {
		super(ReferencePoint);
	}

static final int OPT = 2;
  Front[] fs;
  boolean maximizing;
  private int currentDeep;
  private int currentDimension;
  private int maxNumberOfPoints;
  private Comparator<POINT> pointComparator;



  /*public WFGHV(int dimension, int maxNumberOfPoints) {
    this(dimension, maxNumberOfPoints, new ArrayPoint(dimension));
  }

  public WFGHV(int dimension, int maxNumberOfPoints, Point referencePoint) {
    this.referencePoint = new ArrayPoint(referencePoint);
    maximizing = false;
    currentDeep = 0;
    currentDimension = dimension;
    this.maxNumberOfPoints = maxNumberOfPoints;
    pointComparator = new PointComparator();

    int maxd = this.maxNumberOfPoints - (OPT / 2 + 1);
    fs = new WfgHypervolumeFront[maxd];
    for (int i = 0; i < maxd; i++) {
      fs[i] = new WfgHypervolumeFront(maxNumberOfPoints, dimension);
    }
  }
*/
  public double get2DHV(Front front) {
    double hv = 0.0;

    hv = Math.abs((front.get(0).get(0) - referencePoint_.get(0)) *
        (front.get(0).get(1) - referencePoint_.get(1))) ;

    for (int i = 1; i < front.size(); i++) {
      hv += Math.abs((front.get(i).get(0) - referencePoint_.get(0)) *
          (front.get(i).get(1) - front.get(i - 1).get(1)));

    }

    return hv;
  }

  public double getInclusiveHV(POINT point) {
    double volume = 1;
    for (int i = 0; i < currentDimension; i++) {
      volume *= Math.abs(point.get(i) - referencePoint_.get(i));
    }

    return volume;
  }

  public double getExclusiveHV(Front front, int point) {
    double volume;

    volume = getInclusiveHV(front.get(point));
    if (front.size() > point + 1) {
      makeDominatedBit(front, point);
      double v = getHV(fs[currentDeep - 1]);
      volume -= v;
      currentDeep--;
    }

    return volume;
  }

  public double getHV(Front front) {
    double volume ;
    front.Decreasing_Sort(0);



    if (currentDimension == 2) {
      volume = get2DHV(front);
    } else {
      volume = 0.0;

      currentDimension--;
      int numberOfPoints = front.size() ;
      for (int i = numberOfPoints - 1; i >= 0; i--) {
        volume += Math.abs(front.get(i).get(currentDimension) -
            referencePoint_.get(currentDimension)) *
            this.getExclusiveHV(front, i);
      }
      currentDimension++;
    }

    return volume;
  }


  public void makeDominatedBit(Front front, int p) {
    int z = front.size() - 1 - p;

    for (int i = 0; i < z; i++) {
      for (int j = 0; j < currentDimension; j++) {
        POINT point1 = front.get(p);
        POINT point2 = front.get(p + 1 + i) ;
        double worseValue = worse(point1.get(j), point2.get(j), false) ;
        POINT point3 = fs[currentDeep].get(i) ;
        point3.set(j, worseValue);
      }
    }

    POINT t;
    fs[currentDeep] = new Front();

    for (int i = 1; i < z; i++) {
      int j = 0;
      boolean keep = true;
      while (j < fs[currentDeep].size() && keep) {
        switch (dominates2way(fs[currentDeep].get(i), fs[currentDeep].get(j))) {
          case -1:
            t = fs[currentDeep].get(j);
            fs[currentDeep].remove(fs[currentDeep].size()-1);
            fs[currentDeep].setNumberOfPoints(fs[currentDeep].size()-1);
            fs[currentDeep].set(j, fs[currentDeep].get(fs[currentDeep].size()));
            fs[currentDeep].set(fs[currentDeep].size(), t);
            break;
          case 0:
            j++;
            break;
          default:
            keep = false;
            break;
        }
      }
      if (keep) {
        t = fs[currentDeep].get(fs[currentDeep].size());
        fs[currentDeep].set(fs[currentDeep].size(), fs[currentDeep].get(i));
        fs[currentDeep].set(i, t);
      }
    }

    currentDeep++;
  }


  public int getLessContributorHV(Population solutionList) {
    Front wholeFront = new Front(solutionList);

    int index = 0;
    double contribution = Double.POSITIVE_INFINITY;

    for (int i = 0; i < solutionList.size(); i++) {
      double[] v = new double[solutionList.get(i).getNumberOfObjectives()];
      for (int j = 0; j < v.length; j++) {
        v[j] = solutionList.get(i).getObjective(j);
      }

      double aux = this.getExclusiveHV(wholeFront, i);
      if ((aux) < contribution) {
        index = i;
        contribution = aux;
      }

//      HypervolumeContributionAttribute<Solution<?>> hvc = new HypervolumeContributionAttribute<Solution<?>>() ;
 //     hvc.setAttribute(solutionList.get(i), aux);
      //solutionList.get(i).setCrowdingDistance(aux);
    }

    return index;
  }


  //個体群からfrontを生成するメソッド
  private Front loadFront(Population solutionSet, int notLoadingIndex) {
    int numberOfPoints ;
    if (notLoadingIndex >= 0 && notLoadingIndex < solutionSet.size()) {
      numberOfPoints = solutionSet.size() - 1;
    } else {
      numberOfPoints = solutionSet.size();
    }

    int dimensions = solutionSet.get(0).getNumberOfObjectives();

    Front front = new  Front() ;

    int index = 0;
    for (int i = 0; i < solutionSet.size(); i++) {
      if (i != notLoadingIndex) {
        POINT point = new POINT(dimensions) ;
        for (int j = 0; j < dimensions; j++) {
          point.set(j, solutionSet.get(i).getObjective(j));
        }
        front.add(point);
      }
    }

    return front ;
  }

  private double worse(double x, double y, boolean maximizing) {
    double result;
    if (maximizing) {
      if (x > y) {
        result = y;
      } else {
        result = x;
      }
    } else {
      if (x > y) {
        result = x;
      } else {
        result = y;
      }
    }
    return result;
  }

  int dominates2way(POINT p, POINT q) {
     for (int i = currentDimension - 1; i >= 0; i--) {
      if (p.get(i) < q.get(i)) {
        for (int j = i - 1; j >= 0; j--) {
          if (q.get(j) < p.get(j)) {
            return 0;
          }
        }
        return -1;
      } else if (q.get(i) < p.get(i)) {
        for (int j = i - 1; j >= 0; j--) {
          if (p.get(j) < q.get(j)) {
            return 0;
          }
        }
        return 1;
      }
    }
    return 2;
  }





  public static void main(String args[]) throws IOException, JMException {
  /*  WfgHypervolumeFront front = new WfgHypervolumeFront();

    if (args.length == 0) {
      throw new JMetalException("Usage: WFGHV front [reference point]");
    }

    //if (args.length > 0) {
    // TODO: front.readFrontFromFile(args[0]);
    //}

    int dimensions = front.getPointDimensions();
    Point referencePoint;
    double[] points = new double[dimensions];

    if (args.length == (dimensions + 1)) {
      for (int i = 1; i <= dimensions; i++) {
        points[i - 1] = Double.parseDouble(args[i]);
      }
    } else {
      for (int i = 1; i <= dimensions; i++) {
        points[i - 1] = 0.0;
      }
    }

    referencePoint = new ArrayPoint(points);
    JMetalLogger.logger.info("Using reference point: " + referencePoint);

    WfgHypervolumeVersion wfghv =
        new WfgHypervolumeVersion(referencePoint.getNumberOfDimensions(), front.getNumberOfPoints(), referencePoint);

    System.out.println("HV: " + wfghv.getHV(front)) ;
*/  }

@Override
public Object execute(Population ind, HashMap<String, Object> d) throws JMException {
	// TODO 自動生成されたメソッド・スタブ
	return null;
}

@Override
public String getIndicatorName() {
	// TODO 自動生成されたメソッド・スタブ
	return null;
}
}
